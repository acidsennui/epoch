version: 2


references:
  container_config: &container_config
    setup_remote_docker:
      docker_layer_caching: true
    docker:
      - image: aetrnty/builder
        user: builder
    working_directory: ~/epoch

  rebar_cache_key: &rebar_cache_key rebar-cache-{{ checksum "rebar.lock" }}-{{ checksum "rebar.config" }}
  restore_rebar_cache: &restore_rebar_cache
    restore_cache:
      key: *rebar_cache_key

  build_cache_key: &build_cache_key build-cache-v1-{{ .Revision }}
  restore_build_cache: &restore_build_cache
    restore_cache:
      key: *build_cache_key

  packages_workspace: &packages_workspace /tmp/packages
  build_package: &build_package
    run:
      name: Build Package Tarball
      environment:
        PACKAGES_DIR: *packages_workspace
      command: |
        if [ "$(uname -s)" == "Darwin" ]; then
            PKG_SUFFIX="osx-$(sw_vers -productVersion)"
        elif [ "$(uname -s)" == "Linux" ]; then
            PKG_SUFFIX="ubuntu"
        fi
        make prod-package
        mkdir ${PACKAGES_DIR:?}
        mv _build/prod/rel/epoch/epoch-$(cat VERSION).tar.gz ${PACKAGES_DIR:?}/epoch-$(cat VERSION)-${PKG_SUFFIX}.tar.gz

  package_tests_workspace: &package_tests_workspace /tmp/package_tests
  test_package: &test_package
    run:
      name: Test Package Tarball
      environment:
        PACKAGES_DIR: *packages_workspace
        PACKAGE_TESTS_DIR: *package_tests_workspace
      command: |
        if [ "$(uname -s)" == "Darwin" ]; then
            PKG_SUFFIX="osx-$(sw_vers -productVersion)"
        elif [ "$(uname -s)" == "Linux" ]; then
            PKG_SUFFIX="ubuntu"
        fi
        epmd -daemon
        make python-env
        mkdir ${PACKAGE_TESTS_DIR:?}
        make python-release-test WORKDIR=${PACKAGE_TESTS_DIR:?} TARBALL=${PACKAGES_DIR:?}/epoch-$(cat VERSION)-${PKG_SUFFIX}.tar.gz

  store_test_package_artifacts: &store_test_package_artifacts
    store_artifacts:
      path: *package_tests_workspace

  store_package_artifacts: &store_package_artifacts
    store_artifacts:
      path: *packages_workspace
      destination: /

  deploy_steps: &deploy_steps
    - checkout
    - attach_workspace:
        at: *packages_workspace
    - run:
        name: Install PIP Requirements
        command: |
          pip install --user -r deployment/ansible/pip-requirements.txt
    - run:
        name: Deploy
        environment:
          PACKAGES_DIR: *packages_workspace
        command: |
          export PACKAGE=${PACKAGES_DIR:?}/epoch-$(cat VERSION)-ubuntu.tar.gz
          cd deployment/ansible
          ansible-playbook -i inventory/openstack.yml --limit="epoch:&${DEPLOY_ENV:?}" \
            --extra-vars "package=${PACKAGE:?} env=${DEPLOY_ENV:?}" \
            deploy.yml

jobs:
  build:
    <<: *container_config
    steps:
      - checkout
      - *restore_rebar_cache
      - run:
          name: Build
          command: MAKEFLAGS='-j2' ./rebar3 as test do release
      - save_cache:
          key: *build_cache_key
          paths:
            - "_build"
            - "apps/aecuckoo/c_src"
            - "apps/aecuckoo/priv/bin"
            - "apps/aecuckoo/priv/lib"
      - save_cache:
          key: *rebar_cache_key
          paths:
            - .cache/rebar3
  build2:
    <<: *container_config
    steps:
      - checkout
      - *restore_rebar_cache
      - run:
          name: Build
          command: MAKEFLAGS='-j2' ./rebar3 as test do release
      - save_cache:
          key: *build_cache_key
          paths:
            - "_build"
            - "apps/aecuckoo/c_src"
            - "apps/aecuckoo/priv/bin"
            - "apps/aecuckoo/priv/lib"
      - save_cache:
          key: *rebar_cache_key
          paths:
            - .cache/rebar3

  uat_tests:
    <<: *container_config
    steps:
      - checkout
      - *restore_rebar_cache
      - *restore_build_cache
      - run:
          name: UAT Tests
          command: |
            epmd -daemon
            make python-env && make swagger && make multi-build
            make python-uats
      - run:
          name: Prepare JUnit Report
          command: mv py/nosetests.xml py/junit.xml
      - store_test_results:
          path: py
      - store_artifacts:
          path: _build/dev1/rel/epoch/log
          destination: node1/
      - store_artifacts:
          path: _build/dev2/rel/epoch/log
          destination: node2/
      - store_artifacts:
          path: _build/dev3/rel/epoch/log
          destination: node3/

  deploy_integration:
    <<: *container_config
    environment:
      - DEPLOY_ENV: integration
    steps: *deploy_steps

  deploy_dev1:
    <<: *container_config
    environment:
      - DEPLOY_ENV: dev1
    steps: *deploy_steps

  deploy_dev2:
    <<: *container_config
    environment:
      - DEPLOY_ENV: dev2
    steps: *deploy_steps

  deploy_uat:
    <<: *container_config
    environment:
      - DEPLOY_ENV: uat
    steps: *deploy_steps

# CircleCI skips a job for a tag by default.
# A job must have a filters tags section to run as a part of a tag push
# and all its transitively dependent jobs must also have a filters tags section.
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          requires: ~
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
            tags:
              only: /^v.*$/
      - build2:
          requires: ~
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
            tags:
              only: /^v.*$/

      - test:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
            tags:
              only: /^v.*$/

      - eunit:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
            tags:
              only: /^v.*$/

      - static_analysis:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
            tags:
              only: /^v.*$/

      - osx_package:
          requires:
            - test
            - eunit
            - static_analysis
          filters:
            branches:
              only: master
            tags:
              only: /^v.*$/

      # - deploy_integration:
      #     requires:
      #       - test
      #       - eunit
      #       - static_analysis
      #       - linux_package
      #     filters:
      #       branches:
      #         only: master

      - deploy_dev1:
          requires:
            - linux_package
          filters:
            branches:
              only: env/dev1

      - deploy_dev2:
          requires:
            - linux_package
          filters:
            branches:
              only: env/dev2

      # - hodl:
      #     type: approval
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /^v.*$/

      # - deploy_uat:
      #     requires:
      #       - linux_package
      #       - hodl
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /^v.*$/
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - uat_tests
